"""
Script de prueba para la conexi√≥n con Deepseek y validaci√≥n de instrucciones
"""
import os
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from dotenv import load_dotenv
import logging
from rich.logging import RichHandler
from src.llm.providers.deepseek_custom import DeepseekClient

# Configurar logging
logging.basicConfig(
    level="INFO",
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(rich_tracebacks=True)]
)

log = logging.getLogger("rich")
console = Console()

def test_deepseek_basic():
    """Prueba b√°sica de conexi√≥n con Deepseek"""
    try:
        client = DeepseekClient(api_key=os.getenv("DEEPSEEK_API_KEY"))
        prompt = "Por favor, explica brevemente el rol de un juez en el sistema judicial chileno."
        
        response = client.generate(prompt)
        console.print(Panel(response, title="Respuesta B√°sica", border_style="green"))
        return True
    except Exception as e:
        log.error(f"""
        ‚ùå Error en prueba b√°sica:
        Tipo de error: {type(e).__name__}
        Mensaje: {str(e)}
        
        Esto podr√≠a deberse a:
        - Problemas de conexi√≥n con la API
        - API key inv√°lida
        - Rate limiting
        - Timeout en la respuesta
        
        Por favor, verifique su conexi√≥n y la validez de la API key.
        """)
        return False

def test_role_specific_instructions():
    """Prueba instrucciones espec√≠ficas por rol"""
    try:
        client = DeepseekClient(api_key=os.getenv("DEEPSEEK_API_KEY"))
        
        # Prueba con rol de juez
        response_juez = client.generate(
            "¬øC√≥mo evaluar√≠as la admisibilidad de una querella?",
            role="juez",
            temperature=0.1
        )
        console.print(Panel(response_juez, title="Respuesta como Juez", border_style="blue"))
        
        # Prueba con rol de secretario
        response_secretario = client.generate(
            "¬øQu√© documentos son necesarios para presentar una querella?",
            role="secretario",
            temperature=0.1
        )
        console.print(Panel(response_secretario, title="Respuesta como Secretario", border_style="cyan"))
        
        return True
    except Exception as e:
        log.error(f"""
        ‚ùå Error en prueba de roles:
        Tipo de error: {type(e).__name__}
        Mensaje: {str(e)}
        
        Esto podr√≠a deberse a:
        - Problemas con el formato de las instrucciones
        - Error en la respuesta del modelo
        - Timeout en la respuesta
        
        Revise los logs para m√°s detalles.
        """)
        return False

def test_context_handling():
    """Prueba el manejo de contexto y memoria"""
    try:
        client = DeepseekClient(api_key=os.getenv("DEEPSEEK_API_KEY"))
        
        # Contexto inicial
        context = """
        Caso en curso: Querella por estafa.
        Monto involucrado: $5,000,000 CLP
        Estado: En evaluaci√≥n de admisibilidad
        """
        
        # Primera pregunta con contexto
        response1 = client.generate(
            "¬øQu√© aspectos debo evaluar primero?",
            role="juez",
            context=context,
            temperature=0.1
        )
        console.print(Panel(response1, title="Primera Respuesta con Contexto", border_style="yellow"))
        
        # Segunda pregunta (deber√≠a mantener contexto)
        response2 = client.generate(
            "¬øQu√© documentos adicionales podr√≠an ser necesarios?",
            role="juez",
            temperature=0.1
        )
        console.print(Panel(response2, title="Segunda Respuesta (Contexto Mantenido)", border_style="yellow"))
        
        return True
    except Exception as e:
        log.error(f"""
        ‚ùå Error en prueba de contexto:
        Tipo de error: {type(e).__name__}
        Mensaje: {str(e)}
        
        Esto podr√≠a deberse a:
        - Problemas con el manejo de contexto
        - Error en el formato del contexto
        - L√≠mite de tokens excedido
        
        Revise la estructura del contexto y los l√≠mites del modelo.
        """)
        return False

def test_repetition_handling():
    """Prueba la detecci√≥n y manejo de repeticiones"""
    try:
        client = DeepseekClient(api_key=os.getenv("DEEPSEEK_API_KEY"))
        
        # Forzar una situaci√≥n que podr√≠a causar repetici√≥n
        for _ in range(3):
            response = client.generate(
                "Explica el proceso de admisibilidad.",
                role="juez",
                temperature=0.1
            )
            console.print(Panel(response, title="Respuesta (Prueba Repetici√≥n)", border_style="magenta"))
        
        return True
    except Exception as e:
        log.error(f"""
        ‚ùå Error en prueba de repetici√≥n:
        Tipo de error: {type(e).__name__}
        Mensaje: {str(e)}
        
        Esto podr√≠a deberse a:
        - Problemas con la detecci√≥n de repeticiones
        - Error en el manejo de la conversaci√≥n
        - Timeout en respuestas m√∫ltiples
        
        Verifique los par√°metros de similitud y el manejo de la conversaci√≥n.
        """)
        return False

def main():
    """Funci√≥n principal de pruebas"""
    console.print("\nüîç [bold blue]Iniciando pruebas de Deepseek[/bold blue]\n")
    
    # Intentar cargar variables de .env si existe
    load_dotenv(override=True)
    
    api_key = os.getenv("DEEPSEEK_API_KEY")
    if not api_key:
        log.error("""
        üîë DEEPSEEK_API_KEY no encontrada en variables de entorno
        
        La clave puede estar en:
        1. Variables de entorno del sistema
        2. Archivo .env
        3. GitHub Secrets (necesita ser configurada localmente)
        
        Por favor, aseg√∫rese de que la clave est√© disponible en alguna de estas ubicaciones.
        """)
        return
    
    # Tabla de resultados
    table = Table(title="Resultados de Pruebas")
    table.add_column("Prueba", style="cyan")
    table.add_column("Resultado", style="green")
    
    # Ejecutar pruebas
    tests = [
        ("Conexi√≥n B√°sica", test_deepseek_basic),
        ("Instrucciones por Rol", test_role_specific_instructions),
        ("Manejo de Contexto", test_context_handling),
        ("Manejo de Repeticiones", test_repetition_handling)
    ]
    
    for test_name, test_func in tests:
        result = "‚úÖ PASS" if test_func() else "‚ùå FAIL"
        table.add_row(test_name, result)
    
    console.print(table)
    console.print("\n‚ú® [bold green]Pruebas completadas[/bold green] ‚ú®\n")

if __name__ == "__main__":
    main()
